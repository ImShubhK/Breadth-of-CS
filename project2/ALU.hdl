CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // Use zx value to select between x input and 0s.
   Mux16(a=x, b=false, sel=zx, out=xZero);
   // Create a negated version of selected x bus.
   Not16(in=xZero, out=xNot);
   // Use nx value to select between following options:
   // - Original x bus,
   // - Full zeros,
   // - Negated x bus,
   // - Negated full zeros.
   Mux16(a=xZero, b=xNot, sel=nx, out=xInput);

   // Use zy value to select between y input and 0s.
   Mux16(a=y, b=false, sel=zy, out=yZero);
   // Create a negated version of selected y bus.
   Not16(in=yZero, out=yNot);
   // Use ny value to select from the following options:
   // - Original y bus,
   // - Full zeros,
   // - Negated y bus,
   // - Negated full zeros.
   Mux16(a=yZero, b=yNot, sel=ny, out=yInput);

   // Calculate: x & y
   And16(a=xInput, b=yInput, out=xANDy);
   // Calculate: x + y
   Add16(a=xInput, b=yInput, out=xADDy);
   // Use f to select calculation output of x&y or x+y.
   Mux16(a=xANDy, b=xADDy, sel=f, out=OutF);

   // Create a negated version of calculation result.
   Not16(in=OutF, out=NotOutF);
   // Use no input to select from the following options:
   // - Calcuation result,
   // - Negated calculation result.
   // Use out[15] to signify negative number output.
   // Use out[0..7] LowByte and out[8..15] HighByte as loop values.
   Mux16(a=OutF, b=NotOutF, sel=no, out=out, out[15]=ng, out[0..7]=LByte, out[8..15]=HByte);

   // Check LowByte for non-zero value.
   Or8Way(in=LByte, out=LBit);
   // Check HighByte for non-zero value.
   Or8Way(in=HByte, out=HBit);
   // Combine low and high bit values into single non-zero value.
   Or(a=LBit, b=HBit, out=NotZero);
   // Negate the non-zero value to check if the output is zero.
   Not(in=NotZero, out=zr);
}
